
const BookRepository = require( '../repositories/bookRepository');
const Book = require( '../models/book');

const express = require( 'express');

class BookController {
    constructor() {
        this.bookRepository = new BookRepository();
        this.router = express.Router();
        this.router.get('/', (request, response) => this.getAllBooks(request, response) );
        this.router.get('/:id', (request, response, next) => this.getBook(request, response, next) );
        this.router.post('/', (request, response) => this.addBook(request, response) );
    }

    getAllBooks(request, response) {
        // authenticated user passed on by passport
        console.log( "User: " +  ( ('user' in request) ? JSON.stringify(request.user) : "unknown" )  );
        this.bookRepository.getAllBooks()
            .then(books => {
                response.status(200).send(books);
            })
            .catch(error => BookController.errorResponse(response, error));
    }

    getBook(request, response, next) {
        const id = request.params.id;
        this.bookRepository.getBookById(id)
            .then(book => {
                if ( book ) {
                    response.status(200).send(book);
                } else {
                    var err = 'Not found, id = ' + id;
                    response.status(404).send(err);
                }
            })
            .catch(error => BookController.errorResponse(response, error));
    }

    addBook(request, response) {
        const book = BookController.getBookFromRequest(request);
        if (!book) {
            response.status(400).send({ errors: ['Invalid book']});
        } else {
        this.bookRepository.addBook(book)
            .then((result) => {
                console.log("inserted " + JSON.stringify(result) ); 
                const  reference = request.protocol + '://' + request.get('host') + request.originalUrl + "/" + result[0].bookId;
                const responseBody = {
                    "message" : "Book added successfully",
                    "result" : result,
                    "bookId" : result[0].bookId,
                    "reference" : reference
                };
                
                response.status(201)
                      .set('Location', reference)
                      .send( JSON.stringify( responseBody) );
            })
            .catch(error => BookController.errorResponse(response, error));
        }
    }

    static errorResponse(response, error) {
        response.status(500).send({ errors: [error.message]})
    }

    static getBookFromRequest(request) {

        if ( request.body &&
             'title' in request.body &&
             'author' in request.body
        ) {
            const title = request.body.title;
            const author = request.body.author;
            const isbn = ( 'isbn' in request.body) ? request.body.isbn : null;
            const copies = ( 'copies' in request.body) ? request.body.copies : 0;
               
            // id is generated by db, so currently unknown
            const book =  new Book(null, title, author, isbn, copies);
            console.log ("book to add " + JSON.stringify(book) );
            return book;
        } else {
            return null;
        }
    }


}

module.exports = new BookController().router;
